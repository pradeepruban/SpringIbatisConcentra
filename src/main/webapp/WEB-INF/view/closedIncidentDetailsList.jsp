<%/***********************************************************
  *Copyright (C) 2015 Syntel and/or its affiliates
  *All rights reserved.
************************************************************/%>
<%
/********************************************************************
 Author 				: Syntel
 Version 				: 1.0
 Purpose				: This is for Closed Incident List of SyntBotsITOps Application
 ********************************************************************/
%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<title>Closed Incident Details</title>
<script>
/**
 *This is method is called during jsp is loaded
 */
$(document).ready(function(){
	 fnIntlizClosedIncdntDtlsDataTable();
	 fnItopsGetClosedIncidentsList();
	/*  fnItOpsGetIncidentExecDtlsByIncidentId(); */
	 
	// START AND FINISH DATE
		$('#startdate').datepicker({
			dateFormat : 'yy-mm-dd',
			timeFormat:  'HH:mm',
			
			prevText : '<i class="fa fa-chevron-left"></i>',
			nextText : '<i class="fa fa-chevron-right"></i>',
			onSelect : function(selectedDate) {
				this.getDate()+'.'+(this.getMonth());
				/* var d = new Date(), 
				datetext=datetext+" "+d.getHours()+": "+d.getMinutes()+": "+d.getSeconds();
				$('#startdate').val(datetext); */
	           	$('#finishdate').datepicker('option', 'minDate',selectedDate);
			}
		});
		
		$('#finishdate').datepicker({
			dateFormat : 'yy-mm-dd',
			prevText : '<i class="fa fa-chevron-left"></i>',
			nextText : '<i class="fa fa-chevron-right"></i>',
			onSelect : function(selectedDate) {
				$('#startdate').datepicker('option', 'maxDate', selectedDate);
			}
		});
});
/**
 *This function is used to get data table properties of closed incidents data table
 */
var varClsdIncdntDtlsDataTable;
function fnIntlizClosedIncdntDtlsDataTable(){
	//alert("Inside Dtable")
	varClsdIncdntDtlsDataTable = $('#clsdIncdntDtlsDataTable').dataTable({
															"processing" : true,
															"scrollY" : "195px",
															"autoWidth" : true,
															"iDisplayLength" : 5,
															"sDom" : "<'dt-toolbar'<'col-xs-6 col-sm-6'f>r>"
																	+ "t"
																	+ "<'dt-toolbar-footer'<'col-sm-6 col-xs-6 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
												
															"oTableTools" : {
																"aButtons" : [
																		"copy",
																		"csv",
																		"xls",
																		{
																			"sExtends" : "pdf",
																			"sTitle" : "SyntBots_PDF",
																			"sPdfMessage" : "SyntBots PDF Export",
																			"sPdfSize" : "letter"
																		},
																		{
																			"sExtends" : "print",
																			"sMessage" : "Generated by SyntBots <i>(press Esc to close)</i>"
																		} ],
																"sSwfPath" : "<%=request.getContextPath()%>/smartadmin/js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
															},
												
														  // "sAjaxSource": 'getClosedIncidentList',
															"aoColumns" : [ {
																"data" : "incdntDtlsId"
															}, {
																"data" : "incdntId"
															}, {
																"data" : "incidentOriginalSeverity",
																"mRender": function (data, type, row) {
																	var dataToCompare = "";
																	if( (typeof(data) !="undefined")  && (data != 'undefined') && (data != null) ){
																		dataToCompare=data.toLowerCase();
																	} else
																		{
																			data = '';
																		}
																	
																	if (dataToCompare == 'Sev1') {
																		 return ' <span class="badge bg-color-red">'+data+ '</span>';
															          } else if(dataToCompare == 'Sev2') {
															        	   return ' <span class="badge bg-color-orange">'+data+ '</span>';
															          }
																	  else{
																	   return data;
																	  }
																	 
																	 
														            }
															}, {
																"data" : "incdntAssgnmntGrp"
															},  {
																"data" : "incdntAssgndTo"
															},
															{
																"data" : "incdntState",
																"mRender": function (data, type, row) {
																	var dataToCompare = "";
																	if( (typeof(data) !="undefined")  && (data != 'undefined') && (data != null) ){
																		dataToCompare = data.toLowerCase();
																	} else
																		{
																			data = '';
																		}
																	 if (dataToCompare == 'invoked') {
																		
																		 return '<img src="<%=request.getContextPath()%>/images/discoverImage.GIF" width="20" height="20" aling ="center"/>'+' ' +data;
																	 } 
																	  else if(dataToCompare == 'escalated to l2'){
															        	  
															        	  return '<span class="txt-color-red pull-left"><i class="fa fa-lg fa-exclamation-triangle "></i></span>'+' ' +data;
															          }
																	  else if(dataToCompare == 'service restored'){
															        	  
															        	  return '<span class="txt-color-blue pull-left"><i class="fa fa-lg fa-check"></i></span>'+' ' +data;
															          }
																	  else if(dataToCompare == 'filesystem normal'){
															        	  
															        	  return '<span class="txt-color-blue pull-left"><i class="fa fa-lg fa-check"></i></span>'+' ' +data;
															          }
																	  else if(dataToCompare == 'failed'){
															        	  
															        	 return '<img src="<%=request.getContextPath()%>/images/failed.png" width="20" height="20" aling ="center"/>'+' ' +data;
															          }
																	 else{
																		  return data;
																	  }
																	  
														      }	
																
															},
															{
																"data" : "strIncidentOpenedDate"
															},
															{
																"data" : "strIncidentClosedDate"
															},{
																"data" : "incidentMadeSla"
															},{
																"data" : "incidentExecStatus"
															},{
																"data" : "incidentExecRemarks"
															},
															{
																"data" : "incdntAction"
															}],
															"columnDefs": [
															               {
															                   "targets": [ 0,4,8 ],
															                   "visible": false,
															                   "searchable": false
															               }]
														
														});


	//fnItOpsGetIncidentExecDtlsByIncidentId();
}

/**
 *This method is used to intiate an ajax call to get closed incidents details list
 * @return success function/ error function
*/
function fnItopsGetClosedIncidentsList()
{
	var getClosedIncidentListJsonObj = {};	
	var strJSON = JSON.stringify(getClosedIncidentListJsonObj);
	fnCommonDoAjaxForGet("<%=request.getContextPath()%>/pages/getClosedIncidentList", strJSON,  "fnItopsLoadClosedIncidentsistDataTable", "fnItopsErrOnLoadClosedIncidentsListDataTable");
	
}
/**This method is called on success of fnCommonDoAjaxForGet util method with action get closed incidents details list to load data table
* @param closed incident details data table object
*/
function fnItopsLoadClosedIncidentsistDataTable(varClosedIncidentsListTableData){
	
	 fnLoadDataTable(varClsdIncdntDtlsDataTable, varClosedIncidentsListTableData);
	 varClsdIncdntDtlsDataTable.find('tbody tr:first').addClass('row_selected');
	 if( (typeof(varClosedIncidentsListTableData) !="undefined")  && (varClosedIncidentsListTableData != 'undefined') && (varClosedIncidentsListTableData != null)   
			 && (typeof(varClosedIncidentsListTableData.aaData) !="undefined")  && (varClosedIncidentsListTableData.aaData != 'undefined') && (varClosedIncidentsListTableData.aaData != null) && (varClosedIncidentsListTableData.aaData.length > 0)
			 && (typeof(varClosedIncidentsListTableData.aaData[0]) !="undefined")  && (varClosedIncidentsListTableData.aaData[0] != 'undefined') && (varClosedIncidentsListTableData.aaData[0] != null) 
		){
		//fnSetRemarks(varClosedIncidentsListTableData.aaData[0]);
	}
	// alert("End  of the fnItopsLoadIncidentExecListDataTable fn::");
	varClsdIncdntDtlsDataTable.find('tbody tr:first').addClass('row_selected');
}
/**This method is called on failure of fnCommonDoAjaxForGet util method with action get action closed incidents details list
*/
function fnItopsErrOnLoadIncidentExecListDataTable(){
	alert("End  of the fnItopsErrOnLoadIncidentExecListDataTable fn::");
}
/**This method is called to set values in closed incident list execution remarks portion 
* @param closed incidents row data
*/
function fnSetRemarks(varClsIncdntListRowData){
	document.getElementById('clsincdntLstExecRemarksId').innerHTML = varClsIncdntListRowData.incidentExecRemarks;
}
 
/**This method is called on clicking of row in closed incidents data table
*/
$("#incdntDtlsDataTable tbody").on('click', 'tr', function() {
	
	$("#incdntDtlsDataTable tbody tr").removeClass('row_selected');	
    $(this).addClass('row_selected');
	
});



function fnItOpsGetIncidentExecDtlsByIncidentId(){
	   // alert("start date is"+document.getElementById('startdate').value);
	   // alert("end date is"+document.getElementById('finishdate').value);
	    
	    //document.getElementById('startdate').innerHTML = fnGetDateInDDMMMYYYY(data['startdate']);
		var selectedStartDate=document.getElementById('startdate').value;
		//alert("time is"+startdate.getTime());
		var selectedendDate=document.getElementById('finishdate').value;
	    var getIncidentExecDtlsByIncidentExecIdJsonObj = {};
		getIncidentExecDtlsByIncidentExecIdJsonObj['startDate'] =selectedStartDate;
		getIncidentExecDtlsByIncidentExecIdJsonObj['endDate'] =selectedendDate;
		var strJSON = JSON.stringify(getIncidentExecDtlsByIncidentExecIdJsonObj);
		//alert("strJson is"+strJSON);
		fnCommonDoAjaxForGet("<%=request.getContextPath()%>/pages/getIncidentListByIncidentOpendate", strJSON,  "fnItopsLoadIncidentExecByIncidentExecIdDataTable", "fnErrAfterfnGetIncidentExecDtlsByIncidentExecId"); 
}

function fnItopsLoadIncidentExecByIncidentExecIdDataTable(varReturnData){
	//alert("inside success"+varReturnData);
	//alert("inside success"+varReturnData['incdntAssgnmntGrp']);
	fnLoadDataTable(varClsdIncdntDtlsDataTable,varReturnData);
	 varClsdIncdntDtlsDataTable.find('tbody tr:first').addClass('row_selected');
	//alert("inside fnItopsLoadIncidentExecByIncidentExecIdDataTable"+varReturnData);
}
function fnErrAfterfnGetIncidentExecDtlsByIncidentExecId(){
	
	alert("inside error ");
}
function fnViewIncidentDtlsBasedOnSelectedRow(incdntDtlsId,applicatioName,queueName){
	
		//alert("inside fnViewIncidentDtlsBasedOnSelectedRow");
		fnLoadITOpsMainDownPortionDiv('closedIncidentDetails.jsp', 'itopsIncidentListId', 'closedIncidentDetails','incdntDtlsId='+incdntDtlsId,'Incidents > ClosedIncidentDetails > closedIncidentDetails','itopsPrimeMenuIncidentsUlId','','');

	
}

</script>




</head>
<body>
<section id="widget-grid" class="">
	
	<div class="row">
		<!-- NEW WIDGET START -->
		<article class="col-xs-12 col-sm-12 col-md-12 col-lg-12"> <!-- Widget ID (each widget will need unique ID)-->
		
		<div class="jarviswidget" id="wid-id-11"
			data-widget-colorbutton="false" data-widget-colorbutton="false"
			data-widget-editbutton="false" data-widget-togglebutton="false"
			data-widget-deletebutton="false" data-widget-fullscreenbutton="false"
			data-widget-custombutton="false">
			<div class="row">
					<div class="col-md-4">
						<div class="form-group">
							<label for="category">From Date</label>
							<input type="text" name="startdate" id="startdate" placeholder="Expected start date"/>
						</div>
					</div>
					<div class="col-md-4">
						<div class="form-group">
							<label for="category">To Date</label>
							<input type="text" name="finishdate" id="finishdate"
							placeholder="Expected finish date"/>  
							
						</div>
					</div>
					<div class="col-md-4">
						<button type="button" class="btn btn-primary" onclick="javascript:fnItOpsGetIncidentExecDtlsByIncidentId();">
						Get Details
						</button>	
						</div>			
			</div>
			</div>
			</article>
			</div>
			</section>						
			
	<!-- MAIN CONTENT -->
	<div id="content">
		<section id="widget-grid" class="">	
			<!-- NEW WIDGET START -->
			<article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
				<form name = "department" id =  "department">
				<input type = "hidden" name = "usr_id" id = "usr_id">
				<!-- Widget ID (each widget will need unique ID)-->
				<div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-1" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="true" data-widget-sortable="false">
					
					<header>
						
						<h2>Closed Incidents  </h2>
	
					</header>
	
					<!-- widget div-->
					<div>
	
				<!-- widget content -->
						<div class="widget-body no-padding">
	
							<table id="clsdIncdntDtlsDataTable" class="table table-striped table-bordered table-hover" width="100%">
								<thead>
									<tr>
										<th>ID</th>	
										<th>Incident ID</th>	
										<th>Severity</th>
										<th>Assignment Group</th>	
										<th>Assigned To</th>		
										<th>Incident State</th>	
										<th style="width:12%">Opened</th>	
										<th style="width:12%">Closed</th>	
										<th>Made SLA</th>
										<th>Execution Status</th>	
										<th style="width:30%">Remarks</th>
										<th>Actions</th>
									</tr>
								</thead>
								<tbody>
								
								</tbody>
							</table>
							
							

						</div>
						<!-- end widget content -->
	
					</div>
					<!-- end widget div -->
	
				</div>
				
				<!-- end widget -->
				</form>
			</article>
			<!-- WIDGET END -->
		</section>
		</div>
		
		
</body>
</html>